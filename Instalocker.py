# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\hc\Desktop\app\app.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
 
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import Qt 
from tkinter import filedialog
import os
import images_rc
from main import launch
import threading
from main import style_change
from main import running
from main import style_change_restart
import ctypes
from PyQt5.QtWidgets import QApplication, QWidget, QCheckBox
import winshell
from win32com.client import Dispatch
import sys


instalocker_version = "v.0.4.a"
myappid = 'mycompany.myproduct.subproduct.version' # arbitrary string
ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(myappid)

# get the path to the script's executable
executable_path = os.path.abspath(sys.argv[0])

# get the path to the desktop folder
desktop_folder = winshell.desktop()

# create a shortcut object
shortcut_path = os.path.join(desktop_folder, "Instalocker.lnk")
shortcut = Dispatch('WScript.Shell').CreateShortCut(shortcut_path)

# set the properties of the shortcut
shortcut.Targetpath = executable_path
shortcut.WorkingDirectory = os.path.dirname(executable_path)
shortcut.IconLocation = executable_path + ",0"
shortcut.save()        
        
         
class Ui_MainWindow(object):
    selected_button = None
    def setupUi(self, MainWindow):
        super().__init__()
        global lock_state
        global infinit_state
        lock_state = False
        infinit_state = True
        script_dir = os.path.dirname(os.path.abspath(__file__))
        last_selected_path = os.path.join(script_dir, 'last_selected.txt')
        with open(last_selected_path, 'r') as file:
            last_selected = file.read()    
        self.thread_running = False
        self.stop_thread = False
        style_change.button_style_changed.connect(self.change_button_style)
        running.change_running.connect(self.is_running)
        style_change_restart.restart_style_changed.connect(self.restart)
        MainWindow.setWindowFlag(QtCore.Qt.FramelessWindowHint)
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(760, 441)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(0, 0))
        MainWindow.setMaximumSize(QtCore.QSize(962, 524))
        MainWindow.setMouseTracking(True)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("background-color: rgb(47, 69, 98);")
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setAutoFillBackground(False)
        self.centralwidget.setStyleSheet("background-color: rgb(21, 38, 66);")
        
        self.centralwidget.setObjectName("centralwidget")
        self.right = QtWidgets.QWidget(self.centralwidget)
        self.right.setGeometry(QtCore.QRect(120, 30, 641, 411))
        self.right.setStyleSheet("\n"
"background-color: rgb(47, 69, 98);")
        self.right.setObjectName("right")
        
        self.champ_select = QtWidgets.QWidget(self.right)
        self.champ_select.setGeometry(QtCore.QRect(10, 50, 621, 350))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.champ_select.sizePolicy().hasHeightForWidth())
        self.champ_select.setSizePolicy(sizePolicy)
        self.champ_select.setStyleSheet("border-radius: 5px; \n"
"background-color: rgb(80, 102, 128);")
        self.champ_select.setObjectName("champ_select")
        self.champ_select.setObjectName("champ_select")
        
        self.scrollArea = QtWidgets.QScrollArea(self.champ_select)
        self.scrollArea.setGeometry(QtCore.QRect(10, 10, 601, 321))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget(self.scrollArea)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)

        # Create the grid layout
        self.gridLayout = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
        self.gridLayout.setAlignment(QtCore.Qt.AlignTop)
        self.gridLayout.setVerticalSpacing(27) # set vertical spacing to 10 pixels
        self.gridLayout.setHorizontalSpacing(10) # set horizontal spacing to 10 pixels
        # Load the images and add them to the grid layout
        images_dir = os.path.join(os.getcwd(), 'images')

        image_files = os.listdir(images_dir)
        for i, filename in enumerate(image_files):
            # Create a QToolButton with the image
            button_image = QtWidgets.QToolButton(self.scrollAreaWidgetContents)
            button_image.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
            button_image.setText(filename[:-4])
            button_image.setStyleSheet("QToolButton { \
                border-style= none;\
                font: 7pt 'Segoe UI Black'; \
                color: rgb(186, 255, 201); \
                \
                } \
                \
                QToolButton:hover { \
                        background-color: rgb( 62, 180, 137); border: 3px solid rgba(0,0,0,0); font: 7pt 'Segoe UI Black';color: rgba(0, 0, 0);\
                } \
                \
                QToolButton:checked { \
                        background-color: rgb( 62, 180, 137);  border: 3px solid rgba(0,0,0,0);font: 7pt 'Segoe UI Black'\
                }")
            pixmap = QtGui.QPixmap(os.path.join(images_dir, filename)) 
            button_image.setIcon(QtGui.QIcon(pixmap))
            button_image.setIconSize(QtCore.QSize(46, 46))
            # Connect the clicked signal of the button to a slot function
            button_image.clicked.connect(lambda checke,name = filename[:-4], obj=button_image: self.handleButtonClicked(obj, name))
            # Create a QPushButton with the image name
            button_name = QtWidgets.QPushButton("")
            button_name.setObjectName(filename[:-4])
            # Create a new layout and add both labels to it
            layout = QtWidgets.QVBoxLayout()
            layout.addWidget(button_image)
            layout.addWidget(button_name)
            # Add the layout to the grid layout
            row = i // 7  # New row every 9 images
            col = i % 7
            self.gridLayout.setVerticalSpacing(0)
            self.gridLayout.addLayout(layout, row, col)
            if filename[:-4] == last_selected:
                default = button_image
        # Set a fixed size for the grid layout
        self.handleButtonClicked(default, "Start")
        self.scrollArea.verticalScrollBar().setStyleSheet("QScrollBar:vertical {\n"
"    border: none;\n"
"    background: rgb(45, 45, 68);\n"
"    width: 14px;\n"
"    margin: 15px 0 15px 0;\n"
"    border-radius: 0px;\n"
" }\n"
"\n"
"/*  HANDLE BAR VERTICAL */\n"
"QScrollBar::handle:vertical {    \n"
"    background-color: rgb(80, 80, 122);\n"
"    min-height: 30px;\n"
"    border-radius: 7px;\n"
"}\n"
"QScrollBar::handle:vertical:hover{    \n"
"    background-color:  rgb(25, 240, 162);\n"
"}\n"
"QScrollBar::handle:vertical:pressed {    \n"
"    background-color:rgb(62, 180, 137);\n"
"}\n"
"\n"
"/* BTN TOP - SCROLLBAR */\n"
"QScrollBar::sub-line:vertical {\n"
"    border: none;\n"
"    background-color: rgb(59, 59, 90);\n"
"    height: 15px;\n"
"    border-top-left-radius: 7px;\n"
"    border-top-right-radius: 7px;\n"
"    subcontrol-position: top;\n"
"    subcontrol-origin: margin;\n"
"}\n"
"QScrollBar::sub-line:vertical:hover {    \n"
"    background-color:  rgb(25, 240, 162);\n"
"}\n"
"QScrollBar::sub-line:vertical:pressed {    \n"
"    background-color: rgb(62, 180, 137);\n"
"}\n"
"\n"
"/* BTN BOTTOM - SCROLLBAR */\n"
"QScrollBar::add-line:vertical {\n"
"    border: none;\n"
"    background-color: rgb(59, 59, 90);\n"
"    height: 15px;\n"
"    border-bottom-left-radius: 7px;\n"
"    border-bottom-right-radius: 7px;\n"
"    subcontrol-position: bottom;\n"
"    subcontrol-origin: margin;\n"
"}\n"
"QScrollBar::add-line:vertical:hover {    \n"
"background-color:  rgb(25, 240, 162)\n"
"}\n"
"QScrollBar::add-line:vertical:pressed {    \n"
"        background-color:rgb(62, 180, 137);\n"
"}\n"
"\n"
"/* RESET ARROW */\n"
"QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical {\n"
"    background: none;\n"
"}\n"
"QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {\n"
"    background: none;\n"
"}\n"
"\n"
"\n"
"\n"
"/* HORIZONTAL SCROLLBAR - HOMEWORK */\n"
"QScrollBar:horizontal {\n"
"   \n"
"}\n"
"QScrollBar::handle:horizontal {\n"
"    \n"
"}\n"
"QScrollBar::add-line:horizontal {\n"
"    \n"
"}\n"
"QScrollBar::sub-line:horizontal {\n"
"    \n"
"}\n"
"QScrollBar::up-arrow:horizontal, QScrollBar::down-arrow:horizontal\n"
"{\n"
"\n"
"}\n"
"QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal\n"
"{\n"
"\n"
"}")
        self.Searchbar = QtWidgets.QLineEdit(self.right)
        self.Searchbar.setGeometry(QtCore.QRect(513, 20, 110, 18))
        self.Searchbar.setMinimumSize(QtCore.QSize(0, 18))
        self.Searchbar.setMaximumSize(QtCore.QSize(16777215, 15))
        self.Searchbar.setStyleSheet("background-color: rgb(73, 97, 127);\n"
"border:none;\n"
"border-radius: 5px;\n"
"color: rgb(157, 157, 157);\n"
"font: 10pt \"Segoe UI\";")
        self.Searchbar.setText("")
        self.Searchbar.setObjectName("Searchbar")
        
        self.select_title = QtWidgets.QLabel(self.right)
        self.select_title.setGeometry(QtCore.QRect(10, 10, 104, 31))
        self.select_title.setStyleSheet("font: 87 14pt \"Segoe UI Black\";\n"
"color: rgb(186,255,201);")
        self.select_title.setObjectName("select_title")
        
        self.search_icon = QtWidgets.QPushButton(self.right)
        self.search_icon.setGeometry(QtCore.QRect(602, 21, 20, 16))
        self.search_icon.setStyleSheet("QPushButton{\n"
"color: rgb(255, 255, 255);\n"
"border: 0px;\n"
"background-color: rgb(73, 97, 127);\n"
"}")
        self.search_icon.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/images/3917132.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.search_icon.setIcon(icon)
        self.search_icon.setObjectName("search_icon")
        
        self.Searchbar.textChanged.connect(self.filter_images)
        
        self.version_label = QtWidgets.QLabel(self.right)
        self.version_label.setGeometry(QtCore.QRect(590, 398, 35, 13))
        self.version_label.setStyleSheet("color: rgba(186,255,201, 100); background-color: rgba(0,0,0,0);font: 7pt")
        self.version_label.setObjectName("label_2")
        
        self.left = QtWidgets.QWidget(self.centralwidget)
        self.left.setGeometry(QtCore.QRect(0, 30, 111, 411))
        self.left.setStyleSheet("background-color: rgb(47, 69, 98);\n"
" ")
        self.left.setObjectName("left")
        
        self.Add_folder = QtWidgets.QPushButton(self.left)
        self.Add_folder.setGeometry(QtCore.QRect(10, 70, 91, 30))
        self.Add_folder.clicked.connect(self.add_folder)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Add_folder.sizePolicy().hasHeightForWidth())
        self.Add_folder.setSizePolicy(sizePolicy)
        self.Add_folder.setMinimumSize(QtCore.QSize(70, 30))
        self.Add_folder.setStyleSheet("QPushButton{\n"
"background-color: rgb(105, 158, 158);\n"
"border:none;  \n"
"font: 87 10pt \"Segoe UI Black\";\n"
"color: rgb(255, 255, 255);\n"
"border-radius: 5px;\n"
" }\n"
"QPushButton:hover:!pressed\n"
"{\n"
" background-color: rgb(135, 203, 203);\n"
"}\n"
" ")
        self.Add_folder.setObjectName("Add_folder")
        
        self.comboBox = QtWidgets.QComboBox(self.left)
        self.comboBox.setGeometry(QtCore.QRect(10, 120, 91, 31))
        self.comboBox.setMinimumSize(QtCore.QSize(80, 0))
        self.comboBox.setStyleSheet(" #comboBox{\n"
"padding-left:10px;\n"
"border:none; \n"
"color:rgb(255, 255, 255);\n"
"font: 87 10pt \"Segoe UI Black\";\n"
"background-color: rgb(105, 158, 158);;\n"
"border-radius: 5px;\n"
"}\n"
"#comboBox::drop-down{\n"
"border:0px\n"
" \n"
"}\n"
"#comboBox::down-arrow{\n"
"image:url(:/images/60995.png);\n"
"width:12px;\n"
"height: 12px;\n"
"margin-right: 15px;\n"
"}\n"
"#comboBox QListView{\n"
"font-size: 12px;\n"
"padding: 5px;\n"
"border-radius: 8px;\n"
"background-color: rgb(105, 158, 158);\n"
"outline: 0px;\n"
"color:rgb(255, 255, 255);\n"
"}\n"
"#comboBox QListView:item{\n"
"padding-left:10px;\n"
"background-color:#fff;\n"
"}\n"
"#comboBox:hover:!pressed\n"
"{\n"
" background-color: rgb(135, 203, 203);\n"
"}\n"
" \n"
" \n"
" ")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        
        self.Start = QtWidgets.QPushButton(self.left)
        self.Start.setGeometry(QtCore.QRect(10, 350, 91, 51))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(100)
        sizePolicy.setVerticalStretch(100)
        sizePolicy.setHeightForWidth(self.Start.sizePolicy().hasHeightForWidth())
        self.Start.setSizePolicy(sizePolicy)
        self.Start.setMinimumSize(QtCore.QSize(80, 30))
        self.Start.setStyleSheet("QPushButton{\n"
"border:none;  \n"
"font: 87 14pt \"Segoe UI Black\";\n"
"color: rgb(255, 255, 255);\n"
" \n"
"    background-color: rgb(62, 180, 137);\n"
"border-radius: 5px;\n"
" }\n"
"QPushButton:hover:!pressed\n"
"{\n"
" \n"
"    background-color: rgb(90, 198, 159);\n"
" \n"
"    \n"
"}")
        self.Start.setObjectName("Start")
        
        self.Menu = QtWidgets.QLabel(self.left)
        self.Menu.setGeometry(QtCore.QRect(-10, 10, 100, 30))
        self.Menu.setMaximumSize(QtCore.QSize(100, 30))
        self.Menu.setStyleSheet("font: 87 14pt \"Segoe UI Black\";\n"
"color: rgb(186,255,201);")
        self.Menu.setObjectName("Menu")
        
        self.lock_switch = QtWidgets.QWidget(self.left)
        self.lock_switch.setGeometry(QtCore.QRect(0, 300, 121, 31))
        self.lock_switch.setStyleSheet(" \n"
"background-color: rgb(54, 76, 106);")
        self.lock_switch.setObjectName("lock_switch")
        self.toggle = QtWidgets.QLabel(self.lock_switch)
        self.toggle.setGeometry(QtCore.QRect(10, 7, 34, 17))
        self.toggle.setStyleSheet("border:none;  \n"
"font: 87 12pt \"Segoe UI Black\";\n"
"color: rgb(62, 180, 137);\n"
"border-radius: 5px;\n"
"background-color: rgba(255, 255, 255, 0);")
        self.toggle.setObjectName("toggle")
        self.LOCK = QtWidgets.QCheckBox(self.lock_switch)
        self.LOCK.setGeometry(QtCore.QRect(57, 1, 51, 31))
        self.LOCK.setStyleSheet("QCheckBox::indicator{\n"
"width:50px;\n"
"height:50px;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"}\n"
"\n"
"QCheckBox::indicator:checked{\n"
"image:  url(:/images/toggle_button_on.png);\n"
"}\n"
"QCheckBox::indicator:unchecked{\n"
"    image:  url(:/images/toggle_button_off.png);\n"
"}")
        self.LOCK.setText("")
        self.LOCK.setObjectName("LOCK")
        self.LOCK.stateChanged.connect(self.toggle_lock)
        self.switcht_infinit = QtWidgets.QWidget(self.left)
        self.switcht_infinit.setGeometry(QtCore.QRect(0, 260, 121, 31))
        self.switcht_infinit.setStyleSheet(" \n"
"background-color: rgb(54, 76, 106);")
        self.switcht_infinit.setObjectName("switcht_infinit")
        self.infinit_label = QtWidgets.QLabel(self.switcht_infinit)
        self.infinit_label.setGeometry(QtCore.QRect(10, -10, 28, 41))
        self.infinit_label.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.infinit_label.setStyleSheet("border:none;  \n"
"font: 87 12pt \"Segoe UI Black\";\n"
"color: rgb(62, 180, 137);\n"
"border-radius: 5px;\n"
"background-color: rgba(255, 255, 255, 0);")
        self.infinit_label.setObjectName("infinit_label")
        self.toggle_infinit = QtWidgets.QCheckBox(self.switcht_infinit)
        self.toggle_infinit.setGeometry(QtCore.QRect(57, 1, 51, 31))
        self.toggle_infinit.setStyleSheet("QCheckBox::indicator{\n"
"width:50px;\n"
"height:50px;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"}\n"
"\n"
"QCheckBox::indicator:checked{\n"
"image:  url(:/images/toggle_button_on.png);\n"
"}\n"
"QCheckBox::indicator:unchecked{\n"
"    image:  url(:/images/toggle_button_off.png);\n"
"}")
        self.toggle_infinit.setText("")
        self.toggle_infinit.setObjectName("toggle_infinit")
        self.toggle_infinit.stateChanged.connect(self.toggle_to_infinit)
        self.Titlebar = QtWidgets.QWidget(self.centralwidget)
        self.Titlebar.setGeometry(QtCore.QRect(-10, 0, 771, 31))
        self.Titlebar.setObjectName("Titlebar")
        
        self.minimize = QtWidgets.QPushButton(self.Titlebar)
        self.minimize.setGeometry(QtCore.QRect(710, 8, 21, 21))
        self.minimize.clicked.connect(lambda: MainWindow.showMinimized())
        self.minimize.setStyleSheet("QPushButton{\n"
"color: rgb(255, 255, 255);\n"
"border: 0px;\n"
"}\n"
"QPushButton:hover:!pressed\n"
"{\n"
" \n"
"    background-color: rgb(43, 63, 97);\n"
" \n"
"    \n"
"}")
        self.minimize.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/images/window-minimize.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.minimize.setIcon(icon1)
        self.minimize.setObjectName("minimize")
 
        self.close_window = QtWidgets.QPushButton(self.Titlebar)
        self.close_window.setGeometry(QtCore.QRect(740, 6, 21, 20))
        self.close_window.clicked.connect(lambda: self.stop_proc())
        self.close_window.clicked.connect(lambda:  app.exit())
        self.close_window.setStyleSheet("QPushButton{\n"
"color: rgb(255, 255, 255);\n"
"border: 0px;\n"
"}\n"
"QPushButton:hover:!pressed\n"
"{\n"
"\n"
"    background-color: rgb(43, 63, 97);\n"
"    \n"
"}")
        self.close_window.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/images/closewindow.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.close_window.setIcon(icon2)
        self.close_window.setObjectName("close_window")
        
        self.title = QtWidgets.QLabel(self.Titlebar)
        self.title.setGeometry(QtCore.QRect(47, 0, 71, 31))
        self.title.setStyleSheet(" \n"
"color: rgb(25, 240, 162);\n"
" \n"
"font: 10pt \"Bauhaus 93\";")
        self.title.setObjectName("title")
        self.title.setObjectName("title")
        self.label = QtWidgets.QLabel(self.Titlebar)
        self.label.setGeometry(QtCore.QRect(21, 5, 21, 21))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(":/images/image.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.label.setObjectName("label")
        self.please_restart = QtWidgets.QLabel(self.Titlebar)
        self.please_restart.setGeometry(QtCore.QRect(120, 10, 93, 13))
        self.please_restart.setStyleSheet("font: 87 italic 8pt \"Segoe UI Black\";\n"
"color: rgb(21, 38, 66)")
        self.please_restart.setObjectName("please_restart")
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)  
        self.comboBox.currentIndexChanged.connect(self.role_selected)   
        self.Start.clicked.connect(lambda: self.start(self.Start))
        self.role_selected()
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Instalocker"))
        MainWindow.setWindowIcon(QIcon("image.ico"))
        self.select_title.setText(_translate("MainWindow", "Champions"))
        self.version_label.setText(_translate("MainWindow", instalocker_version))
        self.Add_folder.setText(_translate("MainWindow", "Folder"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Support"))
        self.comboBox.setItemText(1, _translate("MainWindow", "ADC"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Middle"))
        self.comboBox.setItemText(3, _translate("MainWindow", "Jungle"))
        self.comboBox.setItemText(4, _translate("MainWindow", "Top"))
        self.comboBox.setItemText(5, _translate("MainWindow", "Pre-Bot"))
        self.Start.setText(_translate("MainWindow", "START"))
        self.Menu.setText(_translate("MainWindow", "     Menu"))
        self.toggle.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600;\">LOCK</span></p></body></html>"))
        self.title.setText(_translate("MainWindow", "Instalocker"))
        self.please_restart.setText(_translate("MainWindow", "PLEASE RESTART"))
        self.infinit_label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:24pt;\">∞</span></p></body></html>"))
        # Event handler for the mouse press event on the title bar
        def mousePress(event):
            if event.button() == Qt.LeftButton:
                self.dragPos = event.globalPos() - MainWindow.frameGeometry().topLeft()
                event.accept()
        # Event handler for the mouse move event on the title bar
        def mouseMoveEvent(event):
            if event.buttons() == Qt.LeftButton:
                MainWindow.move(event.globalPos() - self.dragPos)
                event.accept()
        # Event handler for the mouse release event on the title bar
        def mouseReleaseEvent(event):
            if event.button() == Qt.LeftButton:
                event.accept()
        self.Titlebar.mousePressEvent = mousePress
        self.Titlebar.mouseMoveEvent = mouseMoveEvent
        self.Titlebar.mouseReleaseEvent = mouseReleaseEvent
        
    def handleButtonClicked(self, button, champ):
            global name
            name = champ
            if name != "Start":
                script_dir = os.path.dirname(os.path.abspath(__file__))
                last_selected_path = os.path.join(script_dir, 'last_selected.txt')
                with open(last_selected_path, 'w') as file:
                    file.writelines(champ)
                print("clicked on: ",champ)
            for obj in self.scrollAreaWidgetContents.children():
                if isinstance(obj, QtWidgets.QToolButton):
                    obj.setStyleSheet("QToolButton { background-color: none;font: 7pt 'Segoe UI Black';color: rgb(186, 255, 201); border: 3px solid rgba(0,0,0,0); } \
                                        QToolButton:hover { background-color: rgb(62, 180, 137);font: 7pt 'Segoe UI Black';color: rgb(0,0,0);   border: 3px solid rgba(0,0,0,0); }")
                    obj.setFixedSize(obj.iconSize().width()+10, obj.iconSize().height()+30)
            button.setStyleSheet("QToolButton { font: 7pt 'Segoe UI Black';color: rgb(0,0,0);background-color: rgb(62, 180, 137);border: 3px solid rgba(0,0,0,0); }")
            button.setFixedSize(button.iconSize().width()+10, button.iconSize().height()+30)

    def filter_images(self, search):
        for i in range(self.gridLayout.count()):
            item = self.gridLayout.itemAt(i)
            layout = item.layout() # get the layout that contains both the image and the name
            label_name = layout.itemAt(1).widget()
            champ_name = label_name.objectName()
            image = layout.itemAt(0).widget()
            if search.lower() in champ_name.lower():
                image.setVisible(True) # Show the layout
                label_name.setVisible(True)
            else:
                image.setVisible(False) # Hide the layout
                label_name.setVisible(False)
    def toggle_lock(self, state):
        global lock_state
        if state == 2:  # Qt.Checked
            lock_state = True
        else:
            lock_state = False
        print('Checkbox lock_state:', lock_state)
    def toggle_to_infinit(self, state):
        global infinit_state
        if state == 2:  # Qt.Checked
            infinit_state = False
        else:
            infinit_state = True
        print('Checkbox lock_state:', infinit_state)
    #opens dialog for directory (league lockfile)            
    def add_folder(self):           
        folder_selected = filedialog.askdirectory()
        script_dir = os.path.dirname(os.path.abspath(__file__))
        path_path = os.path.join(script_dir, 'path.txt')
        with open(path_path, 'w') as file:
            file.writelines(folder_selected)
    def role_selected(self):
        global role
        role = self.comboBox.currentText()
    def start(self, button):
        global name
        global role
        global lock_state
        global infinit_state
        if self.thread_running:
            print("Trying to stop thread.")
            self.thread_running = False
            self.stop_thread =True
            button.setStyleSheet("QPushButton{\n"
"border:none;  \n"
"font: 87 14pt \"Segoe UI Black\";\n"
"color: rgb(255, 255, 255);\n"
" \n"
"    background-color: rgb(62, 180, 137);\n"
"border-radius: 5px;\n"
" }\n"
"QPushButton:hover:!pressed\n"
"{\n"
" \n"
"    background-color: rgb(90, 198, 159);\n"
" \n"
"    \n"
"}")
            button.setText("START")
            return
         
        if name == "Start":
            script_dir = os.path.dirname(os.path.abspath(__file__))
            last_selected_path = os.path.join(script_dir, 'last_selected.txt')
            with open(last_selected_path, 'r') as file:
                last_selected = file.read()  
            print("starting with", role, last_selected)
            thread = threading.Thread(target=launch, args=(self, last_selected, role, lock_state,infinit_state))
            thread.start()
        else:
            script_dir = os.path.dirname(os.path.abspath(__file__))
            last_selected_path = os.path.join(script_dir, 'last_selected.txt')
            with open(last_selected_path, 'w') as file:
                file.writelines(name)
            print("Starting with", role, name)
            thread = threading.Thread(target=launch, args=(self, name, role, lock_state,infinit_state))
            thread.start()
    def stop_proc(self):
        self.stop_thread = True
    def change_button_style(self, new_style):
        # Change the button style based on the new_style value received
        self.Start.setStyleSheet(new_style)
        self.Start.setText("START")
    def is_running(self, new_style):
        # Change the button style based on the new_style value received
        self.Start.setStyleSheet(new_style)
        self.Start.setText("RUNNING")
    def restart(self,new_style):
        if self.thread_running:
            self.please_restart.setStyleSheet(new_style)
        else:
            self.please_restart.setStyleSheet("color: rgb(21, 38, 66)")
    
    
    
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
